{
  "address": "0xaDFdD6C21aBDeaA29Bb46B1731143fa0CeAE3705",
  "abi": [],
  "transactionHash": "0x62ba4b2683448882e8cd602668f0f85f73452c2c68946de7054eb4d9b1cfb6d2",
  "receipt": {
    "to": null,
    "from": "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    "contractAddress": "0xaDFdD6C21aBDeaA29Bb46B1731143fa0CeAE3705",
    "transactionIndex": 2,
    "gasUsed": "623387",
    "logsBloom": "0x
    "blockHash": "0xf603d35b5cbbb8854df5a70fb9998c4a08bcb25e5e9677eee609752a6e187b3c",
    "transactionHash": "0x62ba4b2683448882e8cd602668f0f85f73452c2c68946de7054eb4d9b1cfb6d2",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 40503475,
        "transactionHash": "0x62ba4b2683448882e8cd602668f0f85f73452c2c68946de7054eb4d9b1cfb6d2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005364e3557572bd5d5903c0e9c21be359f2eac1da",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000046def31629c0000000000000000000000000000000000000000000000000209d400648f13585000000000000000000000000000000000000000000000020da94391c548c028bd00000000000000000000000000000000000000000000000209cf92755db0bc5000000000000000000000000000000000000000000000020da947ffb47a22c4bd",
        "logIndex": 5,
        "blockHash": "0xf603d35b5cbbb8854df5a70fb9998c4a08bcb25e5e9677eee609752a6e187b3c"
      }
    ],
    "blockNumber": 40503475,
    "cumulativeGasUsed": "1550904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "610ad3bd7195d54ef0275e07edd319ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GhafMarketplace/GhafMarketPlaceLib.sol\":\"GhafMarketPlaceLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/GhafMarketplace/GhafMarketPlaceLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nlibrary GhafMarketPlaceLib {\\r\\n\\r\\n    // Structures\\r\\n\\r\\n    enum BuyTypes {\\r\\n        BUYNOW, // BUYNOW\\r\\n        AUCTION //AUCTION                    \\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Structure for storing Nft data\\r\\n    /// @param seller Address of seller \\r\\n    /// @param isSold True if the Nft is sold\\r\\n    /// @param hasAccepted True if the seller accepted one of the bids\\r\\n    /// @param deadline The time(timestamp) each user can bid on an nft\\r\\n    /// @param buyType Type of Buy nft (e.g. BUYNOW or AUCTION )\\r\\n    /// @param initialAmount Initial Amount of buyre's can uses for payment\\r\\n    /// @param initialPaymentToken Initial Address of token that buyer uses for payment\\r\\n\\tstruct Nft {\\r\\n        address seller;\\r\\n        bool isSold;\\r\\n        bool hasAccepted;\\r\\n        bool isListed;\\r\\n        uint256 deadline;\\r\\n        BuyTypes buyType;\\r\\n        uint initialAmount;\\r\\n        address initialPaymentToken;\\r\\n  \\t}\\r\\n\\r\\n    /// @notice Structure for recording buyers bids\\r\\n    /// @param buyer Buyer can withdraw ETH to this address or send Nft to this address\\r\\n    /// @param bidAmount Amount of buyre's bid\\r\\n    /// @param isAccepted True if the bid is accepted by seller\\r\\n    /// @param paymentToken Address of token that buyer uses for payment\\r\\n\\tstruct Bid {\\r\\n\\t\\taddress buyer;\\r\\n\\t\\tuint bidAmount;\\r\\n        bool isAccepted;\\r\\n        address paymentToken;\\r\\n  \\t}\\r\\n\\r\\n    function listNftHelper(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        BuyTypes _buyType,\\r\\n        uint256 _deadline,\\r\\n        mapping(address =>  mapping(uint => Nft)) storage nfts,\\r\\n        address _seller,\\r\\n        uint _initialAmount,\\r\\n        address _initialPaymentToken\\r\\n    ) external  {\\r\\n        require(\\r\\n            !nfts[_nftContractAddress][_tokenId].isListed, \\r\\n            \\\"GhafMarketPlace: already listed\\\"\\r\\n        );\\r\\n \\r\\n        // Saves listed Nft\\r\\n        Nft memory _nft;\\r\\n        _nft.seller = _seller;\\r\\n        _nft.isListed = true;\\r\\n        _nft.buyType = _buyType;\\r\\n        _nft.deadline = _deadline;\\r\\n        _nft.initialAmount = _initialAmount;\\r\\n        _nft.initialPaymentToken = _initialPaymentToken;\\r\\n        nfts[_nftContractAddress][_tokenId] = _nft;\\r\\n    }\\r\\n\\r\\n    function delistNftHelper(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        mapping(address  => mapping(uint => Nft)) storage nfts,\\r\\n        address _seller\\r\\n    ) external view {\\r\\n        require(nfts[_nftContractAddress][_tokenId].isListed, \\\"GhafMarketPlace: no nft\\\");\\r\\n        require(nfts[_nftContractAddress][_tokenId].seller == _seller, \\\"GhafMarketPlace: not owner\\\");\\r\\n        require(!nfts[_nftContractAddress][_tokenId].isSold, \\\"GhafMarketPlace: already sold\\\");\\r\\n        require(!nfts[_nftContractAddress][_tokenId].hasAccepted, \\\"GhafMarketPlace: already accepted\\\");\\r\\n    }\\r\\n\\r\\n    function putBidHelper(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        mapping(address  => mapping(uint => Nft)) storage nfts,\\r\\n        uint256 timestamp\\r\\n    ) external view {\\r\\n        _canBid(\\r\\n            nfts[_nftContractAddress][_tokenId].isListed, \\r\\n            nfts[_nftContractAddress][_tokenId].hasAccepted,\\r\\n            nfts[_nftContractAddress][_tokenId].isSold,\\r\\n            nfts[_nftContractAddress][_tokenId].buyType,\\r\\n            nfts[_nftContractAddress][_tokenId].deadline,\\r\\n            timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function increaseBidHelper(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint _bidIdx,\\r\\n        uint _newAmount,\\r\\n        mapping(address  => mapping(uint => Nft)) storage nfts,\\r\\n        mapping(address  => mapping(uint => Bid[])) storage bids,\\r\\n        address _seller,\\r\\n        uint256 timestamp\\r\\n    ) external view {\\r\\n        _canBid(\\r\\n            nfts[_nftContractAddress][_tokenId].isListed, \\r\\n            nfts[_nftContractAddress][_tokenId].hasAccepted,\\r\\n            nfts[_nftContractAddress][_tokenId].isSold,\\r\\n            nfts[_nftContractAddress][_tokenId].buyType,\\r\\n            nfts[_nftContractAddress][_tokenId].deadline,\\r\\n            timestamp\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            bids[_nftContractAddress][_tokenId][_bidIdx].buyer == _seller, \\r\\n            \\\"GhafMarketPlace: not owner\\\"\\r\\n        );\\r\\n        require(\\r\\n            _newAmount > bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount, \\r\\n            \\\"GhafMarketPlace: low amount\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n  \\r\\n\\r\\n    /// @notice Checks the bidding conditions\\r\\n    /// @dev Conditions for bidding: Nft exists, no offer accepted, not sold\\r\\n    function _canBid(\\r\\n        bool _isListed,\\r\\n        bool _hasAccepted,\\r\\n        bool _isSold,\\r\\n        BuyTypes buyType,\\r\\n        uint256 deadline,\\r\\n        uint256 timestamp\\r\\n    ) private pure {\\r\\n        require(_isListed, \\\"GhafMarketPlace: not listed\\\");\\r\\n        require(!_hasAccepted, \\\"GhafMarketPlace: already accepted\\\");\\r\\n        require(!_isSold, \\\"GhafMarketPlace: sold nft\\\");\\r\\n        require(buyType == BuyTypes.AUCTION, \\\"GhafMarketPlace: buyType is not AUCTION\\\");\\r\\n        require(\\r\\n            timestamp < deadline,\\r\\n            \\\"GhafMarketPlace: The deadline for bid is over\\\"\\r\\n        );\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6e4055377a62bcd1da036e1be5b345584a0e96dba85ad853b267afa03fa96c0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610a5161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063676c480f1461005b5780639f6f48b314610070578063a03b591d14610083578063a5b6fdd214610096575b600080fd5b61006e6100693660046108f1565b6100b6565b005b61006e61007e366004610936565b610270565b61006e61009136600461096e565b6102ce565b8180156100a257600080fd5b5061006e6100b1366004610872565b610484565b6001600160a01b038416600090815260208381526040808320868452909152902054600160b01b900460ff166101335760405162461bcd60e51b815260206004820152601760248201527f476861664d61726b6574506c6163653a206e6f206e667400000000000000000060448201526064015b60405180910390fd5b6001600160a01b038481166000908152602084815260408083208784529091529020548116908216146101a85760405162461bcd60e51b815260206004820152601a60248201527f476861664d61726b6574506c6163653a206e6f74206f776e6572000000000000604482015260640161012a565b6001600160a01b038416600090815260208381526040808320868452909152902054600160a01b900460ff16156102215760405162461bcd60e51b815260206004820152601d60248201527f476861664d61726b6574506c6163653a20616c726561647920736f6c64000000604482015260640161012a565b6001600160a01b038416600090815260208381526040808320868452909152902054600160a81b900460ff161561026a5760405162461bcd60e51b815260040161012a906109da565b50505050565b6001600160a01b03841660009081526020838152604080832086845290915290208054600282015460019092015461026a9260ff600160b01b8404811693600160a81b8104821693600160a01b9091048216929190911690866106b1565b6001600160a01b0388166000908152602085815260408083208a845290915290208054600282015460019092015461032c9260ff600160b01b8404811693600160a81b8104821693600160a01b9091048216929190911690866106b1565b6001600160a01b038881166000908152602085815260408083208b845290915290208054918416918890811061037257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b0316146103d95760405162461bcd60e51b815260206004820152601a60248201527f476861664d61726b6574506c6163653a206e6f74206f776e6572000000000000604482015260640161012a565b6001600160a01b0388166000908152602084815260408083208a8452909152902080548790811061041a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160010154851161047a5760405162461bcd60e51b815260206004820152601b60248201527f476861664d61726b6574506c6163653a206c6f7720616d6f756e740000000000604482015260640161012a565b5050505050505050565b6001600160a01b0388166000908152602085815260408083208a8452909152902054600160b01b900460ff16156104fd5760405162461bcd60e51b815260206004820152601f60248201527f476861664d61726b6574506c6163653a20616c7265616479206c697374656400604482015260640161012a565b60408051610100810182526000602082018190529181018290526080810182905260a0810182815260c0820183905260e08201929092526001600160a01b0385168152600160608201819052909190889081111561056b57634e487b7160e01b600052602160045260246000fd5b9081600181111561058c57634e487b7160e01b600052602160045260246000fd5b9052506080810186815260c082018490526001600160a01b0380841660e08401528a81166000908152602088815260408083208d845282529182902085518154928701519387015160608801511515600160b01b0260ff60b01b19911515600160a81b0260ff60a81b19961515600160a01b0260ff60a01b19949098166001600160a01b0319909616959095179290921695909517939093169190911792909216178155905160018083019190915560a083015160028301805485949360ff1990911690838181111561066f57634e487b7160e01b600052602160045260246000fd5b021790555060c0820151600382015560e090910151600490910180546001600160a01b0319166001600160a01b03909216919091179055505050505050505050565b856106fe5760405162461bcd60e51b815260206004820152601b60248201527f476861664d61726b6574506c6163653a206e6f74206c69737465640000000000604482015260640161012a565b841561071c5760405162461bcd60e51b815260040161012a906109da565b831561076a5760405162461bcd60e51b815260206004820152601960248201527f476861664d61726b6574506c6163653a20736f6c64206e667400000000000000604482015260640161012a565b600183600181111561078c57634e487b7160e01b600052602160045260246000fd5b146107e95760405162461bcd60e51b815260206004820152602760248201527f476861664d61726b6574506c6163653a2062757954797065206973206e6f742060448201526620aaa1aa24a7a760c91b606482015260840161012a565b81811061084e5760405162461bcd60e51b815260206004820152602d60248201527f476861664d61726b6574506c6163653a2054686520646561646c696e6520666f60448201526c39103134b21034b99037bb32b960991b606482015260840161012a565b505050505050565b80356001600160a01b038116811461086d57600080fd5b919050565b600080600080600080600080610100898b03121561088e578384fd5b61089789610856565b9750602089013596506040890135600281106108b1578485fd5b955060608901359450608089013593506108cd60a08a01610856565b925060c089013591506108e260e08a01610856565b90509295985092959890939650565b60008060008060808587031215610906578384fd5b61090f85610856565b9350602085013592506040850135915061092b60608601610856565b905092959194509250565b6000806000806080858703121561094b578384fd5b61095485610856565b966020860135965060408601359560600135945092505050565b600080600080600080600080610100898b03121561098a578384fd5b61099389610856565b97506020890135965060408901359550606089013594506080890135935060a089013592506109c460c08a01610856565b915060e089013590509295985092959890939650565b60208082526021908201527f476861664d61726b6574506c6163653a20616c726561647920616363657074656040820152601960fa1b60608201526080019056fea2646970667358221220e91450f51d60964351a7ab58a82c9d8e3c5217a87333e04c1dd7d21bb4191e3d64736f6c63430008020033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063676c480f1461005b5780639f6f48b314610070578063a03b591d14610083578063a5b6fdd214610096575b600080fd5b61006e6100693660046108f1565b6100b6565b005b61006e61007e366004610936565b610270565b61006e61009136600461096e565b6102ce565b8180156100a257600080fd5b5061006e6100b1366004610872565b610484565b6001600160a01b038416600090815260208381526040808320868452909152902054600160b01b900460ff166101335760405162461bcd60e51b815260206004820152601760248201527f476861664d61726b6574506c6163653a206e6f206e667400000000000000000060448201526064015b60405180910390fd5b6001600160a01b038481166000908152602084815260408083208784529091529020548116908216146101a85760405162461bcd60e51b815260206004820152601a60248201527f476861664d61726b6574506c6163653a206e6f74206f776e6572000000000000604482015260640161012a565b6001600160a01b038416600090815260208381526040808320868452909152902054600160a01b900460ff16156102215760405162461bcd60e51b815260206004820152601d60248201527f476861664d61726b6574506c6163653a20616c726561647920736f6c64000000604482015260640161012a565b6001600160a01b038416600090815260208381526040808320868452909152902054600160a81b900460ff161561026a5760405162461bcd60e51b815260040161012a906109da565b50505050565b6001600160a01b03841660009081526020838152604080832086845290915290208054600282015460019092015461026a9260ff600160b01b8404811693600160a81b8104821693600160a01b9091048216929190911690866106b1565b6001600160a01b0388166000908152602085815260408083208a845290915290208054600282015460019092015461032c9260ff600160b01b8404811693600160a81b8104821693600160a01b9091048216929190911690866106b1565b6001600160a01b038881166000908152602085815260408083208b845290915290208054918416918890811061037257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b0316146103d95760405162461bcd60e51b815260206004820152601a60248201527f476861664d61726b6574506c6163653a206e6f74206f776e6572000000000000604482015260640161012a565b6001600160a01b0388166000908152602084815260408083208a8452909152902080548790811061041a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160010154851161047a5760405162461bcd60e51b815260206004820152601b60248201527f476861664d61726b6574506c6163653a206c6f7720616d6f756e740000000000604482015260640161012a565b5050505050505050565b6001600160a01b0388166000908152602085815260408083208a8452909152902054600160b01b900460ff16156104fd5760405162461bcd60e51b815260206004820152601f60248201527f476861664d61726b6574506c6163653a20616c7265616479206c697374656400604482015260640161012a565b60408051610100810182526000602082018190529181018290526080810182905260a0810182815260c0820183905260e08201929092526001600160a01b0385168152600160608201819052909190889081111561056b57634e487b7160e01b600052602160045260246000fd5b9081600181111561058c57634e487b7160e01b600052602160045260246000fd5b9052506080810186815260c082018490526001600160a01b0380841660e08401528a81166000908152602088815260408083208d845282529182902085518154928701519387015160608801511515600160b01b0260ff60b01b19911515600160a81b0260ff60a81b19961515600160a01b0260ff60a01b19949098166001600160a01b0319909616959095179290921695909517939093169190911792909216178155905160018083019190915560a083015160028301805485949360ff1990911690838181111561066f57634e487b7160e01b600052602160045260246000fd5b021790555060c0820151600382015560e090910151600490910180546001600160a01b0319166001600160a01b03909216919091179055505050505050505050565b856106fe5760405162461bcd60e51b815260206004820152601b60248201527f476861664d61726b6574506c6163653a206e6f74206c69737465640000000000604482015260640161012a565b841561071c5760405162461bcd60e51b815260040161012a906109da565b831561076a5760405162461bcd60e51b815260206004820152601960248201527f476861664d61726b6574506c6163653a20736f6c64206e667400000000000000604482015260640161012a565b600183600181111561078c57634e487b7160e01b600052602160045260246000fd5b146107e95760405162461bcd60e51b815260206004820152602760248201527f476861664d61726b6574506c6163653a2062757954797065206973206e6f742060448201526620aaa1aa24a7a760c91b606482015260840161012a565b81811061084e5760405162461bcd60e51b815260206004820152602d60248201527f476861664d61726b6574506c6163653a2054686520646561646c696e6520666f60448201526c39103134b21034b99037bb32b960991b606482015260840161012a565b505050505050565b80356001600160a01b038116811461086d57600080fd5b919050565b600080600080600080600080610100898b03121561088e578384fd5b61089789610856565b9750602089013596506040890135600281106108b1578485fd5b955060608901359450608089013593506108cd60a08a01610856565b925060c089013591506108e260e08a01610856565b90509295985092959890939650565b60008060008060808587031215610906578384fd5b61090f85610856565b9350602085013592506040850135915061092b60608601610856565b905092959194509250565b6000806000806080858703121561094b578384fd5b61095485610856565b966020860135965060408601359560600135945092505050565b600080600080600080600080610100898b03121561098a578384fd5b61099389610856565b97506020890135965060408901359550606089013594506080890135935060a089013592506109c460c08a01610856565b915060e089013590509295985092959890939650565b60208082526021908201527f476861664d61726b6574506c6163653a20616c726561647920616363657074656040820152601960fa1b60608201526080019056fea2646970667358221220e91450f51d60964351a7ab58a82c9d8e3c5217a87333e04c1dd7d21bb4191e3d64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}