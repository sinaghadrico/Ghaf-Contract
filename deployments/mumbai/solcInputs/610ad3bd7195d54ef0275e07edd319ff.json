{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/GhafMarketplace/GhafMarketPlaceLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n\r\n\r\nlibrary GhafMarketPlaceLib {\r\n\r\n    // Structures\r\n\r\n    enum BuyTypes {\r\n        BUYNOW, // BUYNOW\r\n        AUCTION //AUCTION                    \r\n    }\r\n\r\n\r\n    /// @notice Structure for storing Nft data\r\n    /// @param seller Address of seller \r\n    /// @param isSold True if the Nft is sold\r\n    /// @param hasAccepted True if the seller accepted one of the bids\r\n    /// @param deadline The time(timestamp) each user can bid on an nft\r\n    /// @param buyType Type of Buy nft (e.g. BUYNOW or AUCTION )\r\n    /// @param initialAmount Initial Amount of buyre's can uses for payment\r\n    /// @param initialPaymentToken Initial Address of token that buyer uses for payment\r\n\tstruct Nft {\r\n        address seller;\r\n        bool isSold;\r\n        bool hasAccepted;\r\n        bool isListed;\r\n        uint256 deadline;\r\n        BuyTypes buyType;\r\n        uint initialAmount;\r\n        address initialPaymentToken;\r\n  \t}\r\n\r\n    /// @notice Structure for recording buyers bids\r\n    /// @param buyer Buyer can withdraw ETH to this address or send Nft to this address\r\n    /// @param bidAmount Amount of buyre's bid\r\n    /// @param isAccepted True if the bid is accepted by seller\r\n    /// @param paymentToken Address of token that buyer uses for payment\r\n\tstruct Bid {\r\n\t\taddress buyer;\r\n\t\tuint bidAmount;\r\n        bool isAccepted;\r\n        address paymentToken;\r\n  \t}\r\n\r\n    function listNftHelper(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        BuyTypes _buyType,\r\n        uint256 _deadline,\r\n        mapping(address =>  mapping(uint => Nft)) storage nfts,\r\n        address _seller,\r\n        uint _initialAmount,\r\n        address _initialPaymentToken\r\n    ) external  {\r\n        require(\r\n            !nfts[_nftContractAddress][_tokenId].isListed, \r\n            \"GhafMarketPlace: already listed\"\r\n        );\r\n \r\n        // Saves listed Nft\r\n        Nft memory _nft;\r\n        _nft.seller = _seller;\r\n        _nft.isListed = true;\r\n        _nft.buyType = _buyType;\r\n        _nft.deadline = _deadline;\r\n        _nft.initialAmount = _initialAmount;\r\n        _nft.initialPaymentToken = _initialPaymentToken;\r\n        nfts[_nftContractAddress][_tokenId] = _nft;\r\n    }\r\n\r\n    function delistNftHelper(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        mapping(address  => mapping(uint => Nft)) storage nfts,\r\n        address _seller\r\n    ) external view {\r\n        require(nfts[_nftContractAddress][_tokenId].isListed, \"GhafMarketPlace: no nft\");\r\n        require(nfts[_nftContractAddress][_tokenId].seller == _seller, \"GhafMarketPlace: not owner\");\r\n        require(!nfts[_nftContractAddress][_tokenId].isSold, \"GhafMarketPlace: already sold\");\r\n        require(!nfts[_nftContractAddress][_tokenId].hasAccepted, \"GhafMarketPlace: already accepted\");\r\n    }\r\n\r\n    function putBidHelper(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        mapping(address  => mapping(uint => Nft)) storage nfts,\r\n        uint256 timestamp\r\n    ) external view {\r\n        _canBid(\r\n            nfts[_nftContractAddress][_tokenId].isListed, \r\n            nfts[_nftContractAddress][_tokenId].hasAccepted,\r\n            nfts[_nftContractAddress][_tokenId].isSold,\r\n            nfts[_nftContractAddress][_tokenId].buyType,\r\n            nfts[_nftContractAddress][_tokenId].deadline,\r\n            timestamp\r\n        );\r\n    }\r\n\r\n    function increaseBidHelper(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _bidIdx,\r\n        uint _newAmount,\r\n        mapping(address  => mapping(uint => Nft)) storage nfts,\r\n        mapping(address  => mapping(uint => Bid[])) storage bids,\r\n        address _seller,\r\n        uint256 timestamp\r\n    ) external view {\r\n        _canBid(\r\n            nfts[_nftContractAddress][_tokenId].isListed, \r\n            nfts[_nftContractAddress][_tokenId].hasAccepted,\r\n            nfts[_nftContractAddress][_tokenId].isSold,\r\n            nfts[_nftContractAddress][_tokenId].buyType,\r\n            nfts[_nftContractAddress][_tokenId].deadline,\r\n            timestamp\r\n        );\r\n\r\n        require(\r\n            bids[_nftContractAddress][_tokenId][_bidIdx].buyer == _seller, \r\n            \"GhafMarketPlace: not owner\"\r\n        );\r\n        require(\r\n            _newAmount > bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount, \r\n            \"GhafMarketPlace: low amount\"\r\n        );\r\n    }\r\n\r\n  \r\n\r\n    /// @notice Checks the bidding conditions\r\n    /// @dev Conditions for bidding: Nft exists, no offer accepted, not sold\r\n    function _canBid(\r\n        bool _isListed,\r\n        bool _hasAccepted,\r\n        bool _isSold,\r\n        BuyTypes buyType,\r\n        uint256 deadline,\r\n        uint256 timestamp\r\n    ) private pure {\r\n        require(_isListed, \"GhafMarketPlace: not listed\");\r\n        require(!_hasAccepted, \"GhafMarketPlace: already accepted\");\r\n        require(!_isSold, \"GhafMarketPlace: sold nft\");\r\n        require(buyType == BuyTypes.AUCTION, \"GhafMarketPlace: buyType is not AUCTION\");\r\n        require(\r\n            timestamp < deadline,\r\n            \"GhafMarketPlace: The deadline for bid is over\"\r\n        );\r\n    }\r\n}"
    },
    "contracts/GhafMarketplace/GhafMarketPlaceLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.8.4;\r\n\r\nimport \"./interfaces/IGhafMarketPlaceLogic.sol\";\r\nimport \"./GhafMarketPlaceStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ncontract GhafMarketPlaceLogic is IGhafMarketPlaceLogic, GhafMarketPlaceStorage,\r\n    OwnableUpgradeable, PausableUpgradeable {\r\n\r\n    modifier nonZeroAddress(address _address) {\r\n        require(_address != address(0), \"GhafMarketPlace: address is zero\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint _protocolFee,\r\n        address _treasury\r\n    ) public initializer {\r\n        OwnableUpgradeable.__Ownable_init();\r\n        // ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n        PausableUpgradeable.__Pausable_init();\r\n\r\n        setProtocolFee(_protocolFee);\r\n        setTreasury(_treasury);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n\r\n    /// @notice Setter for treasury address\r\n    function setTreasury(address _treasury) public override nonZeroAddress(_treasury) onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /// @notice Setter for protocol fee\r\n    function setProtocolFee(uint _protocolFee) public override onlyOwner {\r\n        require(MAX_PROTOCOL_FEE >= _protocolFee, \"GhafMarketPlace: invalid fee\");\r\n        protocolFee = _protocolFee;\r\n    }\r\n\r\n\r\n    /// @notice Pause the contract so only the functions can be called which are whenPaused\r\n    /// @dev Only owner can pause \r\n    function pause() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpause the contract so only the functions can be called which are whenNotPaused\r\n    /// @dev Only owner can pause\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner {}\r\n    \r\n    /// @notice                     Lists Nft of a user\r\n    /// @dev                        Call approve function of Nft Contract before the call this func\r\n    /// @dev                        Just owner of nft can call this func\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _buyType             Type of Buy nft (e.g. BUYNOW or AUCTION )\r\n    /// @param _auctionDuration     The period of time(timestamp) each user can bid on an nft\r\n    /// @param _initialAmount       Initial Amount of buyre's can uses for payment\r\n    /// @param _initialPaymentToken Initial Address of token that buyer uses for payment\r\n    function listNft(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        GhafMarketPlaceLib.BuyTypes _buyType,\r\n        uint256 _auctionDuration,\r\n        uint _initialAmount,\r\n        address _initialPaymentToken\r\n\t) external  whenNotPaused  override returns (bool) {\r\n\r\n\r\n        require(\r\n                IERC721(_nftContractAddress).ownerOf(_tokenId\r\n                ) == _msgSender(),\r\n                \"GhafMarketPlace: Caller is not the owner\"\r\n            );\r\n        IERC721(_nftContractAddress).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            _tokenId\r\n        );\r\n\r\n       uint256 deadline = block.timestamp + _auctionDuration;\r\n\r\n        GhafMarketPlaceLib.listNftHelper(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _buyType,\r\n            deadline,\r\n            nfts,\r\n            _msgSender(),\r\n            _initialAmount,\r\n            _initialPaymentToken\r\n        );\r\n        \r\n        emit NftListed(\r\n            _nftContractAddress, \r\n            _tokenId, \r\n            _msgSender(), \r\n            _buyType,\r\n            deadline,\r\n            _initialAmount,\r\n            _initialPaymentToken\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Delists a Nft\r\n    /// @dev                        Revokes all the existing bids\r\n    ///                             Reverts if the seller has accepted a bid or sold it\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    function delistNft(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId\r\n    ) external override returns (bool) {\r\n\r\n        // Owner can delist any Ordinal\r\n        address _seller = \r\n            _msgSender() == owner() ? nfts[_nftContractAddress][_tokenId].seller : _msgSender();\r\n\r\n\r\n        GhafMarketPlaceLib.delistNftHelper(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            nfts,\r\n            nfts[_nftContractAddress][_tokenId].seller\r\n        );\r\n\r\n         IERC721(_nftContractAddress).transferFrom(\r\n            address(this),\r\n            _seller,\r\n            _tokenId\r\n        );\r\n\r\n        // Revokes all bids\r\n        for (uint i = 0; i < bids[_nftContractAddress][_tokenId].length; i++) {\r\n            if (bids[_nftContractAddress][_tokenId][i].buyer != address(0)) { \r\n                // ^ If the bid is not empty\r\n                emit BidRevoked(\r\n                    _nftContractAddress, \r\n                    _tokenId, \r\n                    nfts[_nftContractAddress][_tokenId].seller,\r\n                    bids[_nftContractAddress][_tokenId][i].buyer,\r\n                    i\r\n                );\r\n                _removeBid(\r\n                    _nftContractAddress, \r\n                    _tokenId, \r\n                    bids[_nftContractAddress][_tokenId][i].buyer, \r\n                    i\r\n                );\r\n            }    \r\n        }\r\n\r\n\r\n\r\n        emit NftDelisted(\r\n            _nftContractAddress, \r\n            _tokenId, \r\n            nfts[_nftContractAddress][_tokenId].seller\r\n        );\r\n        nfts[_nftContractAddress][_tokenId].seller = address(0);\r\n        nfts[_nftContractAddress][_tokenId].isSold = false;\r\n        nfts[_nftContractAddress][_tokenId].hasAccepted = false;\r\n        nfts[_nftContractAddress][_tokenId].isListed = false;\r\n        nfts[_nftContractAddress][_tokenId].buyType = GhafMarketPlaceLib.BuyTypes.BUYNOW;\r\n        nfts[_nftContractAddress][_tokenId].deadline = 0;\r\n        nfts[_nftContractAddress][_tokenId].initialAmount = 0;\r\n        nfts[_nftContractAddress][_tokenId].initialPaymentToken = NATIVE_TOKEN;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Puts bid for buyying an Nft\r\n    /// @dev                        User sends the bid amount along with the request\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _amount              Amount of buyer's bid\r\n    /// @param _paymentToken        Address of token that buyer uses for payment\r\n    function putBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _amount,\r\n        address _paymentToken\r\n    ) external payable whenNotPaused nonZeroAddress(_paymentToken) override returns (uint _bidIdx) {\r\n        \r\n        GhafMarketPlaceLib.putBidHelper(_nftContractAddress, _tokenId, nfts,block.timestamp);\r\n\r\n        // Stores bid\r\n        GhafMarketPlaceLib.Bid memory _bid;\r\n        _bid.buyer = _msgSender();\r\n        if (_paymentToken == NATIVE_TOKEN) {\r\n            require(msg.value == _amount, \"GhafMarketPlace: wrong value\");\r\n        } else {\r\n            IERC20(_paymentToken).transferFrom(_msgSender(), address(this), _amount);\r\n        }\r\n        _bid.bidAmount = _amount;\r\n        _bid.paymentToken = _paymentToken;\r\n        bids[_nftContractAddress][_tokenId].push(_bid);\r\n        _bidIdx = bids[_nftContractAddress][_tokenId].length - 1;\r\n\r\n        emit NewBid(\r\n            _nftContractAddress, \r\n            _tokenId,\r\n            nfts[_nftContractAddress][_tokenId].seller, \r\n            _msgSender(),\r\n            _amount,\r\n            _paymentToken,\r\n            _bidIdx\r\n        );\r\n\r\n    }\r\n\r\n    /// @notice                     Increases the existing bid amount\r\n    /// @dev                        Reverts if the new amount is lower than the previous amount\r\n    ///                             User sends the bid difference\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _bidIdx              of the buyer\r\n    /// @param _newAmount           of bid\r\n    function increaseBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _bidIdx,\r\n        uint _newAmount\r\n    ) external payable whenNotPaused override returns (bool) {\r\n\r\n        GhafMarketPlaceLib.increaseBidHelper(\r\n            _nftContractAddress,\r\n            _tokenId,\r\n            _bidIdx,\r\n            _newAmount,\r\n            nfts,\r\n            bids,\r\n            _msgSender(),\r\n            block.timestamp\r\n        );\r\n\r\n        uint bidDifference = _newAmount - bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount;\r\n        address paymentToken = bids[_nftContractAddress][_tokenId][_bidIdx].paymentToken;\r\n\r\n        if (paymentToken == NATIVE_TOKEN) {\r\n            require(msg.value == bidDifference, \"GhafMarketPlace: wrong value\");\r\n        } else {\r\n            IERC20(paymentToken).transferFrom(_msgSender(), address(this), bidDifference);\r\n        }\r\n        \r\n        bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount = _newAmount;\r\n\r\n        emit BidUpdated(\r\n            _nftContractAddress, \r\n            _tokenId, \r\n            nfts[_nftContractAddress][_tokenId].seller,\r\n            _msgSender(),\r\n            _bidIdx,\r\n            _newAmount\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Removes buyer's bid\r\n    /// @dev                        Only bid owner can call this function\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _bidIdx              Index of the bid in bids list\r\n    function cancelBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _bidIdx\r\n    ) external override returns (bool) {\r\n        require(\r\n            bids[_nftContractAddress][_tokenId][_bidIdx].buyer == _msgSender(),\r\n            \"GhafMarketPlace: not owner\"\r\n        );\r\n\r\n        // Handles the case where the seller accepted a bid \r\n        if (bids[_nftContractAddress][_tokenId][_bidIdx].isAccepted) {\r\n            require(!nfts[_nftContractAddress][_tokenId].isSold, \"GhafMarketPlace: nft sold\");\r\n            // Changes the status of the Nft (so seller can accept a new bid)\r\n            nfts[_nftContractAddress][_tokenId].hasAccepted = false;\r\n        }\r\n\r\n        emit BidCanceled(\r\n            _nftContractAddress, \r\n            _tokenId, \r\n            nfts[_nftContractAddress][_tokenId].seller,\r\n            bids[_nftContractAddress][_tokenId][_bidIdx].buyer,\r\n            _bidIdx\r\n        );\r\n        _removeBid(_nftContractAddress, _tokenId,_msgSender(), _bidIdx);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Accepts one of the existing bids & Sends funds to seller & Send Nft to Buyer\r\n    /// @dev                        Will be reverted if the seller has already accepted a bid\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _bidIdx              Index of the bid in bids list\r\n    function acceptBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _bidIdx\r\n    ) external whenNotPaused override returns (bool) {\r\n\r\n        // Owner can acceptBid any bid after auction deadline\r\n\r\n        require(nfts[_nftContractAddress][_tokenId].buyType == GhafMarketPlaceLib.BuyTypes.AUCTION, \"GhafMarketPlace: buyType is not AUCTION\");\r\n        require(!nfts[_nftContractAddress][_tokenId].hasAccepted, \"GhafMarketPlace: already accepted\");\r\n        require(bids[_nftContractAddress][_tokenId].length > _bidIdx, \"GhafMarketPlace: invalid idx\"); \r\n\r\n        if(block.timestamp > nfts[_nftContractAddress][_tokenId].deadline)\r\n        {\r\n             require(\r\n           _msgSender() == owner(),\r\n            \"GhafMarketPlace: The deadline for accept bid is over\"\r\n            );\r\n        }\r\n        else{\r\n            require(nfts[_nftContractAddress][_tokenId].seller == _msgSender(), \"GhafMarketPlace: not owner\");\r\n        }\r\n\r\n\r\n        nfts[_nftContractAddress][_tokenId].hasAccepted = true;\r\n        bids[_nftContractAddress][_tokenId][_bidIdx].isAccepted = true;\r\n\r\n\r\n        emit BidAccepted(\r\n            _nftContractAddress, \r\n            _tokenId,\r\n            nfts[_nftContractAddress][_tokenId].seller,\r\n            bids[_nftContractAddress][_tokenId][_bidIdx].buyer,\r\n            _bidIdx\r\n        );\r\n        _buy(_nftContractAddress,_tokenId,bids[_nftContractAddress][_tokenId][_bidIdx].buyer,bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount,bids[_nftContractAddress][_tokenId][_bidIdx].paymentToken,GhafMarketPlaceLib.BuyTypes.AUCTION);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Sends funds to seller & Send Nft to Buyer\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _buyer     Address of buyer\r\n    /// @param _amount              Amount of buyer's pay\r\n    /// @param _paymentToken        Address of token that buyer uses for payment\r\n    function _buy(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _buyer,\r\n        uint _amount,\r\n        address _paymentToken,\r\n        GhafMarketPlaceLib.BuyTypes  _buyType\r\n    ) internal  returns (bool) {\r\n        // Checks that Nft hasn't been sold before\r\n        require(!nfts[_nftContractAddress][_tokenId].isSold, \"GhafMarketPlace: sold nft\");\r\n        \r\n        IERC721(_nftContractAddress).transferFrom(\r\n            address(this),\r\n            _buyer,\r\n            _tokenId\r\n        );\r\n\r\n        \r\n\r\n        nfts[_nftContractAddress][_tokenId].isSold = true;\r\n        nfts[_nftContractAddress][_tokenId].isListed = false;\r\n        nfts[_nftContractAddress][_tokenId].hasAccepted = false;\r\n        nfts[_nftContractAddress][_tokenId].deadline = 0;\r\n        nfts[_nftContractAddress][_tokenId].initialAmount = 0;\r\n        nfts[_nftContractAddress][_tokenId].initialPaymentToken = NATIVE_TOKEN;\r\n\r\n        uint fee = _sendTokens(_nftContractAddress,_tokenId, _amount,_paymentToken);\r\n\r\n        if(_buyType == GhafMarketPlaceLib.BuyTypes.AUCTION)\r\n        {\r\n             // Revokes all bids - just remove isAccepted bid\r\n        for (uint i = 0; i < bids[_nftContractAddress][_tokenId].length; i++) {\r\n            if (bids[_nftContractAddress][_tokenId][i].buyer != address(0)) { \r\n                // ^ If the bid is not empty\r\n                if(!bids[_nftContractAddress][_tokenId][i].isAccepted )\r\n                {\r\n                  emit BidRevoked(\r\n                    _nftContractAddress, \r\n                    _tokenId, \r\n                    nfts[_nftContractAddress][_tokenId].seller,\r\n                    bids[_nftContractAddress][_tokenId][i].buyer,\r\n                    i\r\n                );\r\n                }\r\n               \r\n                _removeBid(\r\n                    _nftContractAddress, \r\n                    _tokenId, \r\n                    bids[_nftContractAddress][_tokenId][i].buyer, \r\n                    i\r\n                );\r\n            }    \r\n        }\r\n        }\r\n        \r\n\r\n\r\n         emit NftSold(\r\n            _nftContractAddress, \r\n            _tokenId,\r\n            nfts[_nftContractAddress][_tokenId].seller,\r\n            _buyer,\r\n            fee,\r\n            _amount,\r\n            _paymentToken,\r\n            _buyType\r\n            );\r\n        \r\n        \r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Puts amount for buyying an Nft & Sends funds to seller & Send Nft to Buyer\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _amount              Amount of buyer's pay\r\n    /// @param _paymentToken        Address of token that buyer uses for payment\r\n    function buyNft(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _amount,\r\n        address _paymentToken\r\n    ) external payable override returns (bool){\r\n      require(nfts[_nftContractAddress][_tokenId].buyType == GhafMarketPlaceLib.BuyTypes.BUYNOW, \"GhafMarketPlace: buyType is not BUYNOW\");\r\n\r\n       if (_paymentToken == NATIVE_TOKEN) {\r\n            require(msg.value == _amount, \"GhafMarketPlace: wrong value\");\r\n        } else {\r\n            IERC20(_paymentToken).transferFrom(_msgSender(), address(this), _amount);\r\n        }\r\n        _buy(_nftContractAddress,_tokenId,_msgSender(),_amount,_paymentToken,GhafMarketPlaceLib.BuyTypes.BUYNOW);\r\n        return true;\r\n    }\r\n\r\n    /// @notice                     Removes a bid\r\n    /// @param _nftContractAddress  Address of NFT token contract\r\n    /// @param _tokenId             A number that identify the NFT within the NFT token contract\r\n    /// @param _buyer               Address of buyer\r\n    /// @param _bidIdx              Index of the bid in bids list\r\n    function _removeBid(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        address _buyer, \r\n        uint _bidIdx\r\n    ) private {\r\n        if(!bids[_nftContractAddress][_tokenId][_bidIdx].isAccepted)\r\n        {\r\n          if (bids[_nftContractAddress][_tokenId][_bidIdx].paymentToken == NATIVE_TOKEN) {\r\n            // Sends ETH to buyer\r\n            Address.sendValue(payable(_buyer), bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount);\r\n        } else {\r\n            IERC20(bids[_nftContractAddress][_tokenId][_bidIdx].paymentToken).transfer(\r\n                _buyer,\r\n                bids[_nftContractAddress][_tokenId][_bidIdx].bidAmount\r\n            );\r\n        }\r\n        }\r\n       \r\n\r\n        // Deletes the bid\r\n        delete bids[_nftContractAddress][_tokenId][_bidIdx];\r\n    }\r\n\r\n    /// @notice Sends tokens to seller and treasury\r\n    function _sendTokens(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        uint _payAmount,\r\n        address _paymentToken\r\n    ) internal returns (uint _fee) {\r\n\r\n        address paymentToken = _paymentToken;\r\n        uint payAmount = _payAmount;\r\n        _fee = protocolFee * payAmount / MAX_PROTOCOL_FEE;\r\n        \r\n        if (paymentToken == NATIVE_TOKEN) {\r\n            Address.sendValue(payable(nfts[_nftContractAddress][_tokenId].seller), payAmount - _fee);\r\n            if (_fee > 0) {\r\n                Address.sendValue(payable(treasury), _fee);\r\n            }\r\n        } else { \r\n            IERC20(paymentToken).transfer(\r\n                nfts[_nftContractAddress][_tokenId].seller,\r\n                payAmount - _fee\r\n            );\r\n            if (_fee > 0) {\r\n                IERC20(paymentToken).transfer(\r\n                    treasury,\r\n                    _fee\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/GhafMarketplace/GhafMarketPlaceStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.8.4;\r\n\r\nimport \"./interfaces/IGhafMarketPlaceStorage.sol\";\r\n\r\ncontract GhafMarketPlaceStorage is IGhafMarketPlaceStorage {\r\n\r\n    address constant public NATIVE_TOKEN = address(1);\r\n    uint constant public MAX_PROTOCOL_FEE = 100; // 100 = %100\r\n    \r\n    address public override treasury;\r\n    uint public override protocolFee;\r\n    \r\n    mapping(address =>  mapping(uint => GhafMarketPlaceLib.Nft)) public nfts;\r\n    // ^ Mapping from [_nftContractAddress][_tokenId] to a listed Nft\r\n    mapping(address => mapping(uint => GhafMarketPlaceLib.Bid[])) public bids; \r\n    // ^ Mapping from [_nftContractAddress][_tokenId] to bids (note: it wasn't possible to define Bid[] in Nft)\r\n\r\n}"
    },
    "contracts/GhafMarketplace/interfaces/IGhafMarketPlaceLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.8.4;\r\n\r\nimport \"./IGhafMarketPlaceStorage.sol\";\r\nimport \"../GhafMarketPlaceLib.sol\";\r\n\r\n\r\ninterface IGhafMarketPlaceLogic is IGhafMarketPlaceStorage {\r\n\r\n  \t// Events\r\n\r\n    event NftListed(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller,\r\n        GhafMarketPlaceLib.BuyTypes buyType,\r\n        uint256 deadline,\r\n        uint initialAmount,\r\n        address initialPaymentToken\r\n    );\r\n\r\n    event NftDelisted(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller\r\n    );\r\n\r\n    event NewBid(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller, \r\n        address buyer,\r\n        uint bidAmount,\r\n        address paymentToken,\r\n        uint bidIdx\r\n    );\r\n\r\n    event BidUpdated(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller, \r\n        address buyer, \r\n        uint bidIdx,\r\n        uint newAmount\r\n    );\r\n\r\n    event BidAccepted(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller, \r\n        address buyer,\r\n        uint bidIdx\r\n    );\r\n\r\n    event BidCanceled(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller, \r\n        address buyer,\r\n        uint bidIdx\r\n    );\r\n\r\n    event BidRevoked(\r\n        address nftContractAddress, \r\n        uint256 tokenId, \r\n        address seller, \r\n        address buyer, \r\n        uint bidIdx\r\n    );\r\n\r\n    event NftSold(\r\n        address nftContractAddress, \r\n        uint256 tokenId,  \r\n        address seller, \r\n        address buyer,\r\n        uint fee,\r\n        uint payAmount,\r\n        address paymentToken,\r\n        GhafMarketPlaceLib.BuyTypes buyType\r\n    );\r\n\r\n\t// State-changing functions\r\n\r\n\r\n\r\n    function setProtocolFee(uint _protocolFee) external;\r\n\r\n    function setTreasury(address _treasury) external;\r\n\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n\tfunction listNft(\r\n        address _nftContractAddress,\r\n        uint256 _tokenId,\r\n        GhafMarketPlaceLib.BuyTypes _buyType,\r\n        uint256 _auctionDuration,\r\n        uint _initialAmount,\r\n        address _initialPaymentToken\r\n\t) external returns (bool);\r\n\r\n    function delistNft(address _nftContractAddress,uint256 _tokenId) external returns (bool);\r\n\r\n    function putBid(\r\n        address _nftContractAddress, \r\n        uint256 _tokenId,\r\n        uint _amount,\r\n        address _paymentToken\r\n    ) external payable returns (uint);\r\n\r\n    function increaseBid(\r\n        address _nftContractAddress, \r\n        uint256 _tokenId,\r\n        uint _bidIdx,\r\n        uint _newAmount\r\n    ) external payable returns (bool);\r\n\r\n    function cancelBid(\r\n        address _nftContractAddress, \r\n        uint256 _tokenId,\r\n        uint _bidIdx\r\n    ) external returns (bool);\r\n\r\n    function acceptBid(\r\n        address _nftContractAddress, \r\n        uint256 _tokenId,\r\n        uint _bidIdx\r\n    ) external returns (bool);\r\n\r\n    function buyNft(\r\n        address _nftContractAddress, \r\n        uint256 _tokenId,\r\n        uint _amount,\r\n        address _paymentToken\r\n    ) external payable returns (bool);\r\n    \r\n\r\n}"
    },
    "contracts/GhafMarketplace/interfaces/IGhafMarketPlaceStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.8.4;\r\n\r\nimport \"../GhafMarketPlaceLib.sol\";\r\n\r\ninterface IGhafMarketPlaceStorage {\r\n\r\n\t// Read-only functions\r\n\r\n    function protocolFee() external view returns (uint);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}